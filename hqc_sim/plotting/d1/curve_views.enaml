# -*- coding: utf-8 -*-
"""
"""
from enaml.widgets.api import (Container, PushButton, ObjectCombo, Label)
from enaml.stdlib.mapped_view import MappedView
from enaml.layout.api import hbox, vbox, spacer

from ...utils.ui.qt_list_str_widget import QtListStrWidget
from ..data_views import SimpleInfoConfig, SumInfoConfig
from .curves import SimpleCurve1DInfos, SumCurve1DInfos, CURVE_INFOS


enamldef AbstractCurveConfig(Container):
    """
    """
    attr plot
    attr curve

    # Plot config.
    # TODO later


enamldef SimpleCurveConfig(AbstractCurveConfig): main:
    """
    """
    SimpleInfoConfig:
        padding = 0
        info = curve
        exp = plot.experiment


enamldef SumCurveConfig(AbstractCurveConfig): main:
    """
    """
    SumInfoConfig:
        padding = 0
        info = curve
        exp = plot.experiment


CURVE_CONFIG_MAP = {SimpleCurve1DInfos: SimpleCurveConfig,
                    SumCurve1DInfos: SumCurveConfig,
                    type(None): AbstractCurveConfig}

def _find_id(infos):
    """
    """
    used = [i.id for i in infos]
    pot_free = ['curve_{}'.format(i) for i in range(len(used))]
    for id in pot_free:
        if id not in used:
            return id

    return 'curve_{}'.format(len(used))


enamldef Curves1DConfig(Container): main:
    """
    """
    attr plot
    event curves_updated ::
        c_list.items = [c.id for c in plot.y_infos]
        c_list.refresh_items()
        # Here take cares of rebuilding the list of curves.
    attr _selected

    constraints << [hbox(c_list, vbox(c_lab, c_info,
                                      *list(c_map.objects)+[spacer]),
                         vbox(add, rem, spacer)),
                    c_lab.width >= c_list.width]

    QtListStrWidget: c_list:
        # Display list of curve names
        items << sorted([c.id for c in plot.y_infos])
        selected_item ::
            for i in plot.y_infos:
                if i.id == selected_item:
                    main._selected = i
                    break

    Label: c_lab:
        text << _selected.id if _selected else ''

    ObjectCombo: c_info:
        enabled << bool(_selected)
        # Allow to change the kind of curve
        items = sorted(CURVE_INFOS.values())
        selected << CURVE_INFOS[type(_selected)] if _selected else None
        selected ::
            for c in CURVE_INFOS:
                if CURVE_INFOS[c] == selected and type(main._selected) != c:
                    new = c(id=main._selected.id)
                    if main._selected in main.plot.y_infos:
                        main.plot.replace_curve(main._selected, new)
                    else:
                        main.plot.add_curves([new])
                    main._selected = new
                    break

    MappedView: c_map:
        # View associated to the currently selected curve.
        model << _selected
        typemap = CURVE_CONFIG_MAP
        kwargs = {'plot': plot}
        modelkey = 'curve'

    PushButton: add:
        # Way to add a new curve.
        text = 'Add'
        clicked ::
            id_ = _find_id(plot.y_infos)
            new = SimpleCurve1DInfos(id=id_)
            plot.add_curves([new])
            main.curves_updated = True
            main._selected = new

    PushButton: rem:
       # Way to remove the currently selected curve.
       text = 'Remove'
       clicked ::
           aux = plot.y_infos
           plot.remove_curves([_selected])
           main._selected = None
           main.curves_updated = True
