# -*- coding: utf-8 -*-
"""
"""
from enaml.core.api import Looper, Conditional
from enaml.widgets.api import (DockItem, Container, Menu, Action, Dialog,
                               PushButton, ToolBar, Action, Notebook, Page,
                               ObjectCombo, RadioButton, Label)
from enaml.stdlib.mapped_view import MappedView
from enaml.layout.api import InsertItem, hbox, vbox, spacer, grid, factory
import traits_enaml
with traits_enaml.imports():
    from traits_enaml.widgets.enable_canvas import EnableCanvas

from ...utils.ui.qt_list_str_widget import QtListStrWidget
from .plots import Plot1D
from .curve_views import Curves1DConfig

enamldef Plot1DConfig(Notebook): main:
    """ Main widget to edit the content of a plot.

    """
    attr plot
    tabs_closable = False

    Page:
        title = 'Curves'
        Curves1DConfig:
            plot = main.plot

    # Here could go things as axis formatting and stuff
#    Page:


def _find_new_item_id(area):
    """
    """
    existing_ids = [item.name for item in area.dock_items()]
    for i in range(len(existing_ids)):
        aux = 'item_{}'.format(i)
        if aux not in existing_ids:
            return aux

    return 'item_{}'.format(len(existing_ids))

enamldef AddPlot1DDialog(Dialog): dial:
    """
    """
    attr exp
    attr area
    attr plot << Plot1D(experiment=exp)

    Container:

        constraints = [vbox(conf, hbox(spacer, canc, ok))]

        Plot1DConfig: conf:
            plot = dial.plot

        PushButton: canc:
            text = 'Cancel'
            clicked ::
                dial.reject()

        PushButton: ok:
            text = 'Ok'
            clicked ::
                exp.plots.append(plot)
                name = _find_new_item_id(area)
                item = Plot1DItem(area, name=name, plot=plot)
                area.update_layout(InsertItem(item=name, target='log',
                                              position='top'))
                dial.accept()


enamldef Plot1DItem(DockItem): main:
    """
    """
    attr plot
    title = name.capitalize()
    closed ::
        plot.experiment.plots.remove(plot)

    Container:
        Notebook:
            size_hint_mode = 'current'
            tabs_closable = False
            Page:
                title = 'Graph'
                Container:
                    EnableCanvas:
                        component << plot.renderer

                    ToolBar:
                        # Add plot tools and edition tools here.
                        pass
            Page:
                title = 'Config'
                Container:
                    Plot1DConfig:
                        plot = main.plot
