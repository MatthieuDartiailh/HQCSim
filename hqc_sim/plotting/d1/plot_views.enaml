# -*- coding: utf-8 -*-
"""
"""
from enaml.core.api import Looper, Conditional
from enaml.widgets.api import (DockItem, Container, Menu, Action, Dialog,
                               PushButton, ToolBar, Action, Notebook, Page,
                               ObjectCombo, RadioButton, Label, Field)
from enaml.stdlib.mapped_view import MappedView
from enaml.layout.api import InsertItem, hbox, vbox, spacer, grid, factory
import traits_enaml
with traits_enaml.imports():
    from traits_enaml.widgets.enable_canvas import EnableCanvas

from ...utils.ui.qt_list_str_widget import QtListStrWidget
from .curve_views import Curves1DConfig


def _factory(exp):
    from .plots import Plot1D
    return Plot1D(experiment=exp)


enamldef Plot1DConfig(Notebook): main:
    """ Main widget to edit the content of a plot.

    """
    attr plot
    tabs_closable = False

    Page:
        title = 'Curves'
        Curves1DConfig:
            plot = main.plot

    # Here could go things as axis formatting and stuff
#    Page:


enamldef AddPlot1DDialog(Dialog): dial:
    """
    """
    attr exp
    attr area
    attr plot << _factory(exp)
    title = 'Parametrize your new plot'
    closed ::
        if dial.result:
            item = Plot1DItem(plot=plot)
            exp.add_plot(plot, item)

    Container:

        constraints = [vbox(hbox(n_lb, n_vl), conf, hbox(spacer, canc, ok))]

        Label: n_lb:
            text = 'Name'
        Field: n_vl:
            text := plot.name

        Plot1DConfig: conf:
            hug_width = 'ignore'
            plot = dial.plot

        PushButton: canc:
            hug_width = 'strong'
            text = 'Cancel'
            clicked ::
                dial.reject()

        PushButton: ok:
            hug_width = 'strong'
            text = 'Ok'
            clicked ::
                dial.accept()


enamldef Plot1DItem(DockItem): main:
    """
    """
    attr plot
    title << plot.name
    closed ::
        plot.experiment.plots.remove(plot)

    Container:
        Notebook:
            size_hint_mode = 'current'
            tabs_closable = False
            selected_tab ::
               if change['value'] == 'gr':
                   plot.update_data('')
            Page:
                name = 'gr'
                title = 'Graph'
                Container:
                    EnableCanvas:
                        component << plot.renderer

                    ToolBar:
                        # Add plot tools and edition tools here.
                        pass
            Page:
                title = 'Config'
                Container:
                    Plot1DConfig:
                        plot = main.plot
