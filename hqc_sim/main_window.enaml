# -*- coding: utf-8 -*-
"""
"""
from atom.api import List
from enaml.validator import Validator
from enaml.layout.api import grid, vbox, spacer, InsertItem, hbox
from enaml.widgets.api import (MainWindow, MenuBar, Menu, Action, DockArea,
                               Container, Dialog, Label, Field, ObjectCombo,
                               PushButton)


class ExpNameValidator(Validator):

    forbidden = List()

    def validate(self, text):
        return text not in self.forbidden


def _default_name(exp_names):
    i = 0
    def_name = 'Experiment {}'
    while True:
        if def_name.format(i) not in exp_names:
            return def_name.format(i)
        i += 1


enamldef ExpCreationDialog(Dialog): dial:
    """
    """
    attr model
    attr _exp_names = [e.name for e in model.running_exps]

    attr exp_name << n_val.text if n_val.text else _default_name(_exp_names)
    attr exp_type << e_val.selected
    attr mod_type << m_val.selected

    title = 'Build experiment'

    Container:

        constraints = [vbox(grid([n_lab, n_val], [e_lab, e_val],
                                 [m_lab, m_val]),
                            hbox(spacer, canc, vali))]

        Label: n_lab:
            text = 'Name'
        Field: n_val:
            placeholder = _default_name(_exp_names)
            validator = ExpNameValidator(forbidden=_exp_names)

        Label: e_lab:
            text = 'Experiment'
        ObjectCombo: e_val:
            items = model.experiments

        Label: m_lab:
            text = 'Model'
        ObjectCombo: m_val:
            items = model.models

        PushButton: canc:
            text = 'Cancel'
            clicked ::
                dial.reject()
        PushButton: vali:
            text = 'Ok'
            default = True
            clicked ::
                dial.accept()


enamldef HQCSimWindow(MainWindow):
    """
    """
    attr model

    title = 'HQC Sim'

    MenuBar:
        Menu:
            title = 'File'
            Action:
                text = 'New experiment'
                triggered::
                    dial = ExpCreationDialog(model=model)
                    if dial.exec_():
                        _, view = model.create_experiment(dial.exp_name,
                                                          dial.exp_type,
                                                          dial.mod_type,
                                                          area)
                        area.update_layout(InsertItem(item=dial.exp_name))


    Container:
        DockArea: area:
            pass
