# -*- coding: utf-8 -*-
"""
"""
from atom.api import List
from enaml.validator import Validator
from enaml.core.api import Looper
from enaml.layout.api import grid, vbox, spacer, InsertItem, hbox
from enaml.widgets.api import (MainWindow, MenuBar, Menu, Action, DockArea,
                               Container, Dialog, Label, Field, ObjectCombo,
                               PushButton, FileDialogEx)

open_file_dialog = FileDialogEx.get_open_file_name
save_file_dialog = FileDialogEx.get_save_file_name


class ExpNameValidator(Validator):

    forbidden = List()

    def validate(self, text):
        return text not in self.forbidden


enamldef ExpCreationDialog(Dialog): dial:
    """
    """
    attr model
    attr _exp_names = [e.name for e in model.running_exps]

    attr exp_name << n_val.text if n_val.text else model.default_exp_name()
    attr exp_type << e_val.selected
    attr mod_type << m_val.selected

    title = 'Build experiment'

    Container:

        constraints = [vbox(grid([n_lab, n_val], [e_lab, e_val],
                                 [m_lab, m_val]),
                            hbox(spacer, canc, vali))]

        Label: n_lab:
            text = 'Name'
        Field: n_val:
            placeholder = model.default_exp_name()
            validator = ExpNameValidator(forbidden=_exp_names)

        Label: e_lab:
            text = 'Experiment'
        ObjectCombo: e_val:
            items = sorted(model.experiments.keys())

        Label: m_lab:
            text = 'Model'
        ObjectCombo: m_val:
            items = sorted(model.models)

        PushButton: canc:
            text = 'Cancel'
            clicked ::
                dial.reject()
        PushButton: vali:
            text = 'Ok'
            default = True
            clicked ::
                dial.accept()


enamldef HQCSimWindow(MainWindow): main:
    """
    """
    attr model

    title = 'HQC Sim'

    MenuBar:
        Menu:
            title = 'File'
            Action:
                text = 'New experiment'
                triggered ::
                    dial = ExpCreationDialog(model=model)
                    if dial.exec_():
                        model.build_experiment(dial.exp_name, dial.exp_type,
                                               dial.mod_type, area)
                        area.update_layout(InsertItem(item=dial.exp_name))
            Menu:
                title = 'Save experiment'
                enabled << bool(model.running_exps)
                Looper:
                    iterable << model.running_exps[:]
                    Action:
                        text = loop_item.name
                        triggered ::
                            path = save_file_dialog(main,
                                                    name_filters=['*.ini'])
                            if not path.endswith('.ini'):
                                path += '.ini'
                            if path:
                                model.save_experiment(path, loop_item)

            Action:
                text = 'Load experiment'
                triggered ::

                    path = open_file_dialog(main, name_filters=['*.ini'])
                    if path:
                        exp, _ = model.load_experiment(path, area)
                        if exp:
                            area.update_layout(InsertItem(item=exp.name))
    Container:
        DockArea: area:
            pass
